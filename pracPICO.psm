                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
					CONSTANT led0, 02 
					
                 
                    ;
                    ;
                    ;
                    ; LCD interface ports
                    ;
                    ; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
                    ; as all pins are connected and dedicated.
                    ;
                    CONSTANT LCD_output_port, 40        ;LCD character module output data
                    CONSTANT LCD_input_port, 01         ;LCD character module input data
                    CONSTANT LCD_DB0, 01                ;   8-bit          DB4 - bit0
                    CONSTANT LCD_DB1, 02                ;   interface      DB5 - bit1
                    CONSTANT LCD_DB2, 04                ;                  DB6 - bit2
                    CONSTANT LCD_DB3, 08                ;                  DB7 - bit3
                    CONSTANT LCD_DB4, 10                ;                  DB4 - bit4
                    CONSTANT LCD_DB5, 20                ;                  DB5 - bit5
                    CONSTANT LCD_DB6, 40                ;                  DB6 - bit6
                    CONSTANT LCD_DB7, 80                ;                  DB7 - bit7
                    ;
                    CONSTANT LCD_control_port, 20       ;LCD character module control signals
                    CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
                    CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
                    CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
                   
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
                   
                    ;
					CONSTANT counter,09
					CONSTANT past_sum, 0A
					CONSTANT volume, 0C
					
					
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 0B
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    
					STORE s0, LED_pattern
					STORE s0, counter
					STORE s0, volume
					STORE s0, past_sum
					
					OUTPUT s0, led0
                    OUTPUT s0, LED_port
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
      main_program: LOAD s6, 01 ;flash led0
					OUTPUT s6, led0
                    CALL delay_1s
					
					LOAD s6 , 00 ; turn off led0
					OUTPUT s6, led0
					CALL delay_1s
					
					JUMP main_program

                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN


                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
				;compile 1 regular working
				;compile 2 do it with jumps
				;compile 3 do it within summatinon
				
					ISR:
					STORE s0, ISR_preserve_s0           ;preserve register
					STORE s1, ISR_preserve_s1
					STORE s2, ISR_preserve_s2
					STORE s3, ISR_preserve_s3
					
					FETCH s3, counter ;get old values
					FETCH s1, past_sum
					FETCH s2, volume
					
					INPUT s0, DATA_IN_PORT;get new data
					
					JUMP check_value
					
				
			summation:
				ADD s1,s0 ;add old value to new data
				ADDCY s2, 00 ;shifting right 8 is the same as taking top 8 bits
				JUMP check_counter
				
			check_counter:
				ADD s3, 01 ; add 1 to counter
				COMPARE s3, FF ; see if counter is at 256
				JUMP Z, output_led_8 ;if it is output
				JUMP exit_isr;else leave isr
				
			output_led_8:
			COMPARE s2, 80 ;checks to see if the 8th led is on
			JUMP C, output_led_7 ;if not go to see if 7th is on
			LOAD s2, FF;if so set 8 leds to high
			JUMP divider 
			
			output_led_7:
			COMPARE s2, 40
			JUMP C, output_led_6
			LOAD s2, FE
			JUMP divider
			
			output_led_6:
			COMPARE s2, 20
			JUMP C, output_led_5
			LOAD s2, FC
			JUMP divider
			
			output_led_5:
			COMPARE s2, 10
			JUMP C, output_led_4
			LOAD s2, F8
			JUMP divider
			
			output_led_4:
			COMPARE s2, 08
			JUMP C, output_led_3
			LOAD s2, F0
			JUMP divider
			
			output_led_3:
			COMPARE s2, 04
			JUMP C, output_led_2
			LOAD s2, E0
			JUMP divider
			
			output_led_2:
			COMPARE s2, 02
			JUMP C, output_led_1
			LOAD s2, C0
			JUMP divider
			
			output_led_1:
			COMPARE s2, 01
			JUMP C, output_led_0
			LOAD s2, 80
			JUMP divider
			
			output_led_0:
			LOAD s2, 00
			JUMP divider
				
			divider:
				OUTPUT s2, LED_port ;output led value
				LOAD s3, 00 ;reset numbers
				LOAD s1, 00
				LOAD s2, 00
				JUMP exit_isr
				
			exit_isr:
				STORE s3, counter ;save values
				STORE s1, past_sum
				STORE s2, volume
					
				FETCH s0, ISR_preserve_s0 ;restore registers
				FETCH s1, ISR_preserve_s1
				FETCH s2, ISR_preserve_s2
				FETCH s3, ISR_preserve_s3
				
				RETURNI ENABLE ;leave interrupt
				
			check_value:
					COMPARE s0, 80;checks mid point for 2's compliment
					JUMP NC, abs_value;if no carry negative cause 2's complement 
					
					JUMP summation			
				
			abs_value:
				XOR s0, FF ;not gate
				ADD s0,01 ;add 1 to value (2's compliment)
				JUMP summation
				
				    ; **************************************************************************************
                    ; Interrupt Vector
                    ; **************************************************************************************
                    
                    ADDRESS 3FF
                    JUMP ISR

                    
                    
